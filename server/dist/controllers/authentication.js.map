{"version":3,"sources":["../../src/controllers/authentication.js"],"names":["Moment","require","signup","req","res","next","body","email","password","firstName","lastName","status","send","error","User","findOne","err","existingUser","user","name","first","last","save","savedUser","json","success","token","generateToken","signin","comparedPassword","good","updateProfile","userId","_id","newProfile","phone","findByIdAndUpdate","new","then","sendStatus","catch"],"mappings":"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","file":"authentication.js","sourcesContent":["import token from '../services/token';\nimport User from '../models/user';\nconst Moment = require('moment');\n// import dailyController from './dailyController'\n\n\nexport default {\n    signup: (req, res, next) => {\n        const {\n            email,\n            password,\n            firstName,\n            lastName\n        } = req.body;\n\n        if (!email || !password) {\n            return res\n                .status(422)\n                .send({\n                    error: 'You must provide email and password.'\n                });\n        }\n        User\n            .findOne({\n                email: email\n            }, function (err, existingUser) {\n                if (err) return res.status(422).send(err);\n                if (existingUser) {\n                    return res\n                        .status(422)\n                        .send({\n                            error: 'Email is in use'\n                        });\n                }\n                const user = new User({\n                    name: {\n                        first: firstName,\n                        last: lastName\n                    },\n                    email: email,\n                    password: password\n                })\n\n                user.save(function (err, savedUser) {\n                    if (err) {\n                        return next(err)\n                    }\n\n                    res.json({\n                        success: true,\n                        token: token.generateToken(savedUser)\n                    })\n                })\n            })\n    },\n\n    signin: (req, res, next) => {\n        const email = req.body.email;\n        const password = req.body.password;\n        if (!email || !password) {\n            return res\n                .status(422)\n                .send({\n                    error: 'You must provide email and password.'\n                });\n        }\n        User\n            .findOne({\n                email: email\n            }, function (err, existingUser) {\n                if (err || !existingUser) {\n                    return res.status(401).send(err || {\n                        error: \"User Not Found\"\n                    })\n                }\n                if (existingUser) {\n                    existingUser.comparedPassword(password, function (err, good) {\n                        if (err || !good) {\n                            return res.status(401).send(err || 'User not found')\n                        }\n\n                        res.send({\n                            token: token.generateToken(existingUser)\n                        })\n                    })\n                }\n            })\n    },\n\n    updateProfile: (req, res, next) => {\n        req.user.comparedPassword(req.body.password, (err, good) => {\n            if (err || !good) return res.status(401).send(err || 'Incorrect Password')\n            const userId = req.user._id;\n            const newProfile = {\n                name: {\n                    first: req.body.firstName,\n                    last: req.body.lastName\n                },\n                // password: req.body.password\n            };\n            delete newProfile.email;\n            delete newProfile.phone;\n            delete newProfile.password;\n\n            User.findByIdAndUpdate(userId, newProfile, {\n                    new: true\n                })\n                .then(newUser => {\n                    res.sendStatus(200);\n                })\n                .catch(next)\n        })\n    },\n}"]}