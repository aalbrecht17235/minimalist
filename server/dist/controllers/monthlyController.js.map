{"version":3,"sources":["../../src/controllers/monthlyController.js"],"names":["getMonthly","req","res","next","User","findById","_id","user","populate","path","options","sort","then","data","send","catch","err","json","deleteMonthly","monthlyID","params","id","update","$pull","monthly","$in","Monthly","findByIdAndRemove","status","sendStatus","updateMonthly","monthlyId","newMonthly","body","findByIdAndUpdate"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;kBAEe;;AAEXA,gBAAY,oBAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAiB;;AAGzBC,uBAAKC,QAAL,CAAc,EAAEC,KAAKL,IAAIM,IAAJ,CAASD,GAAhB,EAAd,EACKE,QADL,CACc,EAACC,MAAM,SAAP,EAAkBC,SAAS,EAAEC,MAAM,EAAE,SAAS,CAAX,EAAR,EAA3B,EADd,EAEKH,QAFL,CAEc,OAFd,EAGKI,IAHL,CAGU,UAAUC,IAAV,EAAgB;AAClBX,gBAAIY,IAAJ,CAASD,IAAT;AACH,SALL,EAMKE,KANL,CAMW,UAAUC,GAAV,EAAe;AAClB;AACAd,gBAAIe,IAAJ,CAASD,GAAT;AACH,SATL;AAWH,KAhBU;AAiBf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEIE,mBAAe,uBAACjB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,YAAMgB,YAAYlB,IAAImB,MAAJ,CAAWC,EAA7B;AACAjB,uBAAKkB,MAAL,CAAY,EAAChB,KAAKL,IAAIM,IAAJ,CAASD,GAAf,EAAZ,EAAiC,EAAEiB,OAAO,EAAEC,SAAS,EAAEC,KAAM,CAACN,SAAD,CAAR,EAAX,EAAT,EAAjC,EAECP,IAFD,CAEMc,kBAAQC,iBAAR,CAA0BR,SAA1B,EAAqC,UAASH,GAAT,EAAcH,IAAd,EAAmB;AAC1D,gBAAIG,GAAJ,EAAS,OAAOd,IAAI0B,MAAJ,CAAW,GAAX,EAAgBd,IAAhB,CAAqBE,GAArB,CAAP;;AAETd,gBAAI2B,UAAJ,CAAe,GAAf;AACH,SAJK,CAFN,EAOCd,KAPD,CAOOZ,IAPP;AAQC,KAnEM;;AAsEX2B,mBAAe,uBAAC7B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAE3B,YAAM4B,YAAY9B,IAAImB,MAAJ,CAAWC,EAA7B;AACA,YAAMW,0BAAiB/B,IAAIgC,IAArB,CAAN;;AAGAP,0BAAQQ,iBAAR,CAA0BH,SAA1B,EAAqCC,UAArC,EACKpB,IADL,CACU,sBAAc;AAChBV,gBAAI2B,UAAJ,CAAe,GAAf;AACH,SAHL,EAIKd,KAJL,CAIWZ,IAJX;AAKP;;AAjFU,C","file":"monthlyController.js","sourcesContent":["import User from '../models/user';\nimport Monthly from '../models/Monthly';\n\nexport default {\n    \n    getMonthly: (req,res,next) =>{\n                \n        \n        User.findById({ _id: req.user._id })\n            .populate({path: 'monthly', options: { sort: { 'month': 1 } } })\n            .populate('daily')\n            .then(function (data) {\n                res.send(data)\n            })\n            .catch(function (err) {\n                // If an error occurred, send it to the client\n                res.json(err);\n            });\n       \n    },\n//     createMonthly: (req, res, next) => {\n// //         \n\n//         User.findById({_id: req.user._id})\n//         .populate({path: 'monthly', options: { sort: { 'month': 1 } } })\n//         .then(monthly => {\n\n//         })\n//          const {\n//             best,\n//             worst,\n//             nextWeek,\n//         } = req.body;\n//         let newDate = new Date()\n//         const monthly = new Monthly({\n           \n//             week:  parseInt(Moment(newDate).format('w') - 1),\n//             year: parseInt(Moment(newDate).format('YYYY')),\n//             month: parseInt(Moment(newDate).format('MM')),\n//             best: best,\n//             worst: worst,\n//             nextWeek: nextWeek,\n//             user_id: req.user._id\n//                 })\n\n//                 monthly.save(function (err, savedMonthly) {\n//                     if (err) {\n//                         return next(err)\n//                     }\n//                 }).then(newMonthly => {\n//                     User.findByIdAndUpdate({_id:req.user._id},{ $push: {monthly: newMonthly._id}})\n//                     .then((data)=> res.sendStatus(200))\n//                     .catch(err=>console.log(err))\n\n//                     res.sendStatus(200);\n//                 })\n//                 .catch(next)\n//     },\n// //     \n\n    deleteMonthly: (req, res, next) => {\n        const monthlyID = req.params.id\n        User.update({_id: req.user._id}, { $pull: { monthly: { $in:  [monthlyID]}}})\n\n        .then(Monthly.findByIdAndRemove(monthlyID, function(err, data){\n            if (err) return res.status(500).send(err);\n           \n            res.sendStatus(200)\n        }))\n        .catch(next)\n        },\n        \n    \n    updateMonthly: (req, res, next) => {\n        \n            const monthlyId = req.params.id;\n            const newMonthly = {...req.body}\n           \n           \n            Monthly.findByIdAndUpdate(monthlyId, newMonthly)\n                .then(newMonthly => {\n                    res.sendStatus(200);\n                })\n                .catch(next)\n    }\n    \n}\n"]}